from itertools import chain

Import("env")
b = ModelBuilder(env)

model = "covered-bins.scad"

bin_sizes = [
    [(x, y, ht, dx * x or 1, dy * y or 1)]
    for x, y in [(1, 1), (1, 2), (2, 2)]
    # for dx in ([0] if (x > 1 and y > 1) else []) + [1, 2, 3]
    for dx, dy in [(0, 0), (1, 1), (1, 2), (2, 2), (2, 3), (3, 3)]
    for ht in [2, 3]
    # Omit duplicate entry for 1x1 bin with no divisions
    if (dx + dy + x + y > 2)
]

for opts in GenerateOptions(s=bin_sizes):
    x, y, z, divx, divy = opts.s
    b.STL(
        f"bin-{x}x{y}x{z}-{divx}x,{divy}y.stl",
        model,
        {
            "Part": "bin",
            "gridx": x,
            "gridy": y,
            "gridz": z,
            "divx": divx,
            "divy": divy,
        },
    )
for opts in GenerateOptions(s=[[(1, 1)], [(2, 2)]]):
    x, y = opts.s
    b.STL(f"lid-{x}x{y}.stl", model, {"Part": "lid", "gridx": x, "gridy": y})
    b.STL(
        f"bin-slice-{x}x{y}.stl",
        model,
        {
            "Part": "bin_slice",
            "gridx": x,
            "gridy": y,
            "gridz": 3,
            "divx": 0,
            "divy": 0,
        },
    )

b.Image(
    "demo.gif",
    model,
    [
        {
            "Part": "both_closed",
            "gridx": opts.s[0],
            "gridy": opts.s[1],
            "gridz": opts.s[2],
            "divx": opts.s[3],
            "divy": opts.s[4],
        }
        for opts in GenerateOptions(
            s=[
                [(1, 1, 3, 1, 1)],
                [(1, 1, 3, 2, 2)],
                [(1, 1, 3, 3, 3)],
                [(1, 2, 3, 1, 1)],
                [(1, 2, 3, 2, 3)],
                [(1, 2, 3, 3, 6)],
                [(2, 2, 3, 1, 1)],
                [(2, 2, 3, 2, 2)],
                [(2, 2, 3, 4, 4)],
                [(2, 2, 3, 6, 6)],
            ]
        )
    ],
)

b.add_default_targets()

# vim: ft=python
