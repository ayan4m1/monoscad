Import("env")
b = ModelBuilder(env)

model = "rugged-box.scad"
model_dependencies = ["rugged-box-library.scad"]

boxes = {
    "micro": [
        20,
        20,
        5,
        6,
        False,
        {
            "Latch_Amount_On_Top": 4,
            "Latch_Width": 12,
            "Latch_Screw_Separation": 8,
            "Rib_Width": 3,
        },
    ],
    "mini": [30, 30, 7, 22, False],
    "60x30": [60, 30, 7, 25, False],
    "120x60": [120, 60, 7, 25, False],
}

for box_name, (
    width,
    length,
    top_height,
    bottom_height,
    enable_handle,
    *params,
) in boxes.items():
    for part in ["top", "bottom", "latch", "handle"]:
        if not enable_handle and part == "handle":
            continue
        part_params = {
            **{
                "Part": part,
                "Width": width,
                "Length": length,
                "Top_Height": top_height,
                "Bottom_Height": bottom_height,
                "Top_Grip": 1,
            },
            **(params[0] if params else {}),
        }
        b.STL(
            f"box-{box_name}-{part}.stl",
            model,
            part_params,
            model_dependencies,
        )

b.Image(
    "demo-dimensions.gif",
    model,
    [
        {
            "Part": part,
            "Width": width,
            "Length": length,
            "Top_Height": top_height,
            "Bottom_Height": bottom_height,
        }
        for part, width, length, top_height, bottom_height in [
            ("assembled_open", 160, 90, 20, 45),
            ("assembled_open", 160, 90, 20, 35),
            ("assembled_open", 160, 90, 20, 25),
            ("assembled_open", 160, 90, 15, 25),
            ("assembled_open", 160, 90, 7, 25),
            ("assembled_open", 130, 90, 7, 25),
            ("assembled_open", 100, 90, 7, 25),
            ("assembled_open", 70, 90, 7, 25),
            ("assembled_open", 70, 60, 7, 25),
            ("assembled_open", 70, 60, 7, 15),
            ("assembled_closed", 70, 60, 7, 15),
            ("assembled_closed", 100, 60, 7, 15),
            ("assembled_closed", 130, 60, 7, 15),
            ("assembled_closed", 160, 60, 7, 15),
            ("assembled_closed", 160, 90, 7, 15),
            ("assembled_closed", 160, 90, 7, 25),
            ("assembled_closed", 160, 90, 7, 35),
            ("assembled_closed", 160, 90, 7, 45),
            ("assembled_closed", 160, 90, 15, 45),
            ("assembled_closed", 160, 90, 20, 45),
        ]
    ],
)

b.Image(
    "demo-edges.gif",
    model,
    [
        {
            "Part": part,
            "Width": 160,
            "Length": 90,
            "Top_Height": 20,
            "Bottom_Height": 45,
            "Corner_Radius": corner_radius,
            "Edge_Chamfer_Proportion": edge_chamfer_proportion,
        }
        for part, corner_radius, edge_chamfer_proportion in [
            ("assembled_open", 15, 0.4),
            ("assembled_open", 15, 0.6),
            ("assembled_open", 15, 0.8),
            ("assembled_closed", 15, 0.8),
            ("assembled_closed", 10, 0.8),
            ("assembled_closed", 5, 0.8),
            ("assembled_closed", 5, 0.6),
            ("assembled_closed", 5, 0.4),
            ("assembled_closed", 5, 0.2),
            ("assembled_closed", 5, 0.0),
            ("assembled_closed", 0, 0.0),
            ("assembled_open", 0, 0.0),
            ("assembled_open", 5, 0.0),
            ("assembled_open", 10, 0.0),
            ("assembled_open", 15, 0.0),
            ("assembled_open", 15, 0.0),
            ("assembled_open", 15, 0.2),
        ]
    ],
)

for tutorial_name, steps in {
    "box-with-cutouts": 6,
    "box-with-dividers": 8,
}.items():
    tutorial_images = []
    for tutorial_step in range(1, steps + 1):
        fn = f"tutorial-{tutorial_name}-step-{tutorial_step}.png"
        b.Image(
            fn,
            f"tutorial-{tutorial_name}.scad",
            {"Tutorial_Step": tutorial_step},
        )
        tutorial_images.append(fn)
    b.Document(
        f"tutorial-{tutorial_name}.pdf",
        f"tutorials/{tutorial_name}.md",
        [f"images/publish/{image}" for image in tutorial_images],
    )

b.InsetImage(
    "photo-demo-inset.gif",
    "photo1.jpg",
    "demo-dimensions.gif",
    resize="33%",
    gravity="southwest",
)

b.add_default_targets()

# vim: ft=python
