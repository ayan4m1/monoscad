Import("env")
b = ModelBuilder(env)

segment_model = "mh-segment.scad"
segment_advanced_model = "mh-segment-advanced.scad"
magnetic_parts_model = "mh-magnetic-parts.scad"
vacuum_attachment_model = "mh-vacuum-attachment.scad"
demo_model = "mh-demo.scad"

inner_diameter = 100

b.STL(
    f"segment-{inner_diameter}mm.stl",
    segment_model,
    {"Inner_Diameter": inner_diameter},
)
b.STL(
    f"vacuum-attachment-{inner_diameter}mm.stl",
    vacuum_attachment_model,
    {"Inner_Diameter": inner_diameter, "Connector_Type": "female"},
)

for opts in GenerateOptions(
    model_type=["connector", "grommet"], magnet_holes=[0, (1, "-8mm-magnets")]
):
    b.STL(
        (
            f"120mm-fan-{opts.model_type}"
            f"-{inner_diameter}mm{opts.magnet_holes_fn}.stl"
        ),
        magnetic_parts_model,
        {
            "Inner_Diameter": inner_diameter,
            "Model_Type": opts.model_type,
            "Connector_Type": "male",
            "Plate_Type": "fan",
            "Grommet_Diameter": 120,
            "Magnet_Diameter": 8,
            "Magnet_Holes": opts.magnet_holes,
            "Screw_Holes": 1,
            "Screw_Hole_Top": (
                "inset"
                if opts.model_type == "grommet" and opts.magnet_holes
                else "none"
            ),
        },
    )

for opts in GenerateOptions(
    model_type=["connector", "grommet", "plate"],
    connector_type=["male", "female"],
):
    if opts.model_type != "connector" and opts.connector_type == "female":
        continue
    fn_connector_type = (
        f"-{opts.connector_type}" if opts.model_type == "connector" else ""
    )
    b.STL(
        (
            f"magnetic-{opts.model_type}"
            f"-{inner_diameter}mm{fn_connector_type}.stl"
        ),
        magnetic_parts_model,
        {
            "Inner_Diameter": inner_diameter,
            "Model_Type": opts.model_type,
            "Connector_Type": opts.connector_type,
            "Plate_Type": "round",
            "Grommet_Diameter": 101.6,
            "Magnet_Holes": 1,
            "Screw_Holes": 0 if opts.model_type == "connector" else 1,
            "Screw_Hole_Top": 0 if opts.model_type == "connector" else 1,
        },
    )


b.Image(
    "demo.png",
    demo_model,
    {
        "Inner_Diameter": inner_diameter,
        "Demo": "parts",
        "Enable_Plate_Knurling": 1,
    },
    view_options="axes,scales",
)

b.Image(
    "demo-measurement.png",
    demo_model,
    {
        "Inner_Diameter": inner_diameter,
        "Demo": "measurement",
        "Measurement_Text": 0,
    },
    camera="0,0,20,55,0,15,350",
)

b.Image(
    "part-segment.png",
    segment_model,
    {"Inner_Diameter": inner_diameter},
)
b.Image(
    "part-segment-advanced.png",
    segment_advanced_model,
    {
        "Inner_Diameter": inner_diameter,
        "Top_Bend_Angle": 30,
        "Bottom_Extra_Length": 15,
        "Bottom_Bend_Angle": 45,
        "Bottom_Bend_Radius": 10,
        "Middle_Extra_Length": 10,
        "Join_Rotation": 90,
    },
)
b.Image(
    "part-segment-options.gif",
    segment_model,
    [
        {
            "Inner_Diameter": inner_diameter,
            "Extra_Length": length,
            "Bend_Angle": angle,
            "Bend_Radius": radius,
        }
        for (length, angle, radius) in [
            (0, 0, 0),
            (0, 0, 0),
            (0, 15, 0),
            (0, 15, 30),
            (0, 30, 30),
            (30, 30, 30),
            (60, 30, 30),
            (60, 30, 0),
            (60, 15, 0),
            (60, 0, 0),
            (30, 0, 0),
        ]
    ],
)
b.Image(
    "part-vacuum-attachment.png",
    vacuum_attachment_model,
    {"Inner_Diameter": inner_diameter},
)
for opts in GenerateOptions(
    model_type=["connector", "grommet"], plate_type=["round", "fan"]
):
    b.Image(
        f"part-magnetic-{opts.model_type}-{opts.plate_type}.png",
        magnetic_parts_model,
        {
            "Inner_Diameter": inner_diameter,
            "Model_Type": opts.model_type,
            "Plate_Type": opts.plate_type,
        },
        camera="0,0,0,150,0,28,450"
        if opts.model_type == "connector"
        else None,
    )

b.Image(
    "customization-example-render.png",
    "customization-example.scad",
    camera="0,0,0,40,0,28,350",
    view_options="axes,scales",
)

b.add_default_targets()

# vim: ft=python
